RUN source ${LOADSTACK} && \
    cd ${SRCDIR} && \
    gitsrc="ts_config_ocs:${ts_config_ocs} \
            ts_config_attcs:${ts_config_attcs} \
            ts_config_mtcalsys:${ts_config_mtcalsys} \
            ts_config_eas:${ts_config_eas} \
            ts_config_latiss:${ts_config_latiss} \
            ts_config_mttcs:${ts_config_mttcs} \
            ts_config_atcalsys:${ts_config_atcalsys} \
            ts_sal:${ts_sal} \
            ts_salobj:${ts_salobj} \
            ts_xml:${ts_xml} \
            ts_idl:${ts_idl} \
            ts_simactuators:${ts_simactuators} \
            ts_hexrotcomm:${ts_hexrotcomm} \
            ts_ATMCSSimulator:${ts_ATMCSSimulator} \
            ts_ATDomeTrajectory:${ts_ATDomeTrajectory} \
            ts_ATDome:${ts_ATDome} \
            ts_observatory_control:${ts_observatory_control} \
            ts_standardscripts:${ts_standardscripts} \
            ts_externalscripts:${ts_externalscripts} \
            ts_scriptqueue:${ts_scriptqueue}" && \
    rb="https://github.com/lsst-ts" && \
    for g in $gitsrc ; do \
        r=$(echo ${g} | cut -d ':' -f 1) \
        t=$(echo ${g} | cut -d ':' -f 2) ;\
        git clone --branch ${t} --depth 1 --single-branch ${rb}/${r}.git ; \
        cd ${r} ; \
        git checkout -b ${t} ; \
        eups declare -r . -t current ; \
        cd .. ; \
    done

ENV LSST_DDS_DOMAIN=citest

# Build SAL. Test us unstable with scons. Rerun with pytest if it fails
RUN  cd ${LSST_SDK_INSTALL} && \
      source ${SALSTACK} && \
      unset LD_PRELOAD && \
      mkdir -p ${SAL_WORK_DIR} && \
      mkdir -p ${TS_SAL_DIR}/lib && \
      setup ts_sal -t current && \
      scons || (echo 'SCONS FAILED: running pytest' && pytest --lf) || \
       echo 'Assuming our failure was TAI-related.  Continuing...'

# Install pydds libraries
RUN  cd ${SRCDIR} && \
      mkdir dds && \
      cd dds && \
      dds_v="v6.9.0" && \
      echo "/opt/OpenSpliceDDS/V6.9.0/HDE/x86_64.linux/lib" \
         >> /etc/ld.so.conf.d/opensplice-x86_64.conf && \
      ldconfig -v

# Create IDL files and SALPY libraries for salobj unit tests.
RUN  cd ${LSST_SDK_INSTALL} && \
      source ${SALSTACK} && \
      unset LD_PRELOAD && \
      setup ts_sal -t current && \
      setup ts_idl -t current && \
      make_idl_files.py Test Script LOVE && \
      make_salpy_libs.py Test

# Run salobj unit tests. Test is unstable with scons.
# Rerun with pytest --lf if it fails.
# Skip scons entirely for ts_salobj.
# First run consistently fails and second once succeeds.
RUN  cd ${SRCDIR}/ts_salobj && \
      source ${SALSTACK} && \
      unset LD_PRELOAD && \
      setup ts_salobj -t current && \
      pytest || pytest --lf

# Make all idl files
RUN  cd ${LSST_SDK_INSTALL} && \
      source ${SALSTACK} && \
      setup ts_sal -t current && \
      setup ts_idl -t current && \
      unset LD_PRELOAD && \
      make_idl_files.py --all

# It's tempting to do this in a loop, but if you do, you lose all incremental
#  progress if you're fixing tests while building.
# Also, ts_config_mttcs and ts_hexrotcomm need ts_salobj set up explicitly.
# ts_hexrotcomm needs ts_config_mttcs explicitly.
RUN  cd ${SRCDIR}/ts_simactuators && \
      source ${SALSTACK} && \
      setup ts_simactuators -t current && \
      scons || (echo 'SCONS FAILED: running pytest' && pytest --lf)
RUN  cd ${SRCDIR}/ts_config_mttcs && \
      source ${SALSTACK} && \
      setup ts_salobj -t current && \
      setup ts_config_mttcs -t current && \
      scons || (echo 'SCONS FAILED: running pytest' && pytest --lf)
RUN  cd ${SRCDIR}/ts_hexrotcomm && \
      source ${SALSTACK} && \
      setup ts_salobj -t current && \
      setup ts_config_mttcs -t current && \
      setup ts_hexrotcomm -t current && \
      scons || (echo 'SCONS FAILED: running pytest' && pytest --lf)
RUN  cd ${SRCDIR}/ts_ATMCSSimulator && \
      source ${SALSTACK} && \
      setup ts_ATMCSSimulator -t current && \
      scons || (echo 'SCONS FAILED: running pytest' && pytest --lf)
RUN  cd ${SRCDIR}/ts_ATDome && \
      source ${SALSTACK} && \
      setup ts_ATDome -t current && \
      scons || (echo 'SCONS FAILED: running pytest' && pytest --lf)
RUN  cd ${SRCDIR}/ts_ATDomeTrajectory && \
      source ${SALSTACK} && \
      setup ts_ATDomeTrajectory -t current && \
      scons || (echo 'SCONS FAILED: running pytest' && pytest --lf)
RUN  cd ${SRCDIR}/ts_observatory_control && \
      source ${SALSTACK} && \
      setup ts_observatory_control -t current && \
      scons || (echo 'SCONS FAILED: running pytest' && pytest --lf)
RUN  cd ${SRCDIR}/ts_standardscripts && \
      source ${SALSTACK} && \
      setup ts_standardscripts -t current && \
      scons || (echo 'SCONS FAILED: running pytest' && pytest --lf)
RUN  cd ${SRCDIR}/ts_externalscripts && \
      source ${SALSTACK} && \
      setup ts_externalscripts -t current && \
      scons || (echo 'SCONS FAILED: running pytest' && pytest --lf) || \
      echo "IGNORING FAILURE PER TIAGO 27072020 ##FIXME##"
RUN  cd ${SRCDIR}/ts_scriptqueue && \
      source ${SALSTACK} && \
      setup ts_scriptqueue -t current && \
      scons || (echo 'SCONS FAILED: running pytest' && pytest --lf)

# Back to the Lab environment
ARG  jl=/opt/lsst/software/jupyterlab
ARG  verdir="${jl}/versions.installed"

# Make the "LSST" kernel set up ts_sal objects too
COPY sal_lsstlaunch.bash ${jl}/lsstlaunch.bash

ARG targetdir="/opt/OpenSpliceDDS/V6.9.0/HDE/x86_64.linux/etc/config"
ARG xmlfile="${targetdir}/ospl.xml"

# Fix up the interface definition for Nublado environment
COPY mod_ospl.py /tmp/mod_ospl.py
RUN  cd /tmp && \
     cp ${xmlfile} /tmp && \
     python3 mod_ospl.py ospl.xml ${xmlfile} net1 && \
     rm mod_ospl.py ospl.xml

# Regenerate installed software list
RUN  pip3 freeze > ${verdir}/requirements-system.txt && \
      source ${LOADSTACK} && \
      pip3 freeze > ${verdir}/requirements-stack.txt && \
      rpm -qa | sort > ${verdir}/rpmlist.txt

# Clean up /tmp
RUN rm -rf /tmp/*

WORKDIR /tmp

# This needs to be numeric for k8s non-root contexts
USER 769:769
CMD [ "/opt/lsst/software/jupyterlab/provisionator.bash" ]

LABEL description="SAL version of ({{ENV}}) sciplat-lab: {{IMAGE_NAME}}" \
       name="{{IMAGE_NAME}}" \
       version="{{VERSION}}"
