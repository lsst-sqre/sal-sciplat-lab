FROM {{BASE_IMAGE}}:{{VERSION}}
USER root
SHELL ["/bin/bash", "-lc"]
WORKDIR /tmp
# Start gluing in Tiago's SAL stuff.  We are leaving out the system stuff
#  that won't work in a container, and most of the X stuff, since there is no
#  X server available.

RUN  mkdir -p /opt/lsst/sal /opt/lsst/src
# We don't need a specific SAL user.
#     adduser -u 1004 -m -U -G lsst_lcl,jovyan -s /bin/bash \
#     -c "SAL user" -d /opt/lsst/sal/saluser saluser
COPY lsst-ts.repo /etc/yum.repos.d
RUN  yum repolist && \
      yum install -y https://repo.ius.io/ius-release-el7.rpm
ARG  d2u_v="-6.0.3-7.el7"
ARG  iproute_v="-4.11.0-25.el7_7.2"
# These next four are iproute dependencies
ARG  iptables_v="-1.4.21-34.el7"
ARG  libmnl_v="-1.0.3-7.el7"
ARG  libnetfilter_conntrack_v="-1.0.6-1.el7_3"
ARG  libnfnetlink_v="-1.0.1-4.el7"
#ARG  java_v="-1:1.8.0.242.b08-0.el7_7.x86_64"
# This changes all the time.  Presumably for the better?  Old ones don't
#  stick around on the repo.
ARG  java_v="1.8.0"
# Use just the OpenSplice version (e.g. 6.9.0) so we capture the latest TSS rev
# Nope, pin.
ARG  osplice_v="-6.9.0-2.el6"
RUN  yum install -y --enablerepo=extras \
      "dos2unix${d2u_v}" \
      "iproute${iproute_v}" \
      "iptables${iptables_v}" \
      "libmnl${libmnl_v}" \
      "libnfnetlink${libnfnetlink_v}" \
      "libnetfilter_conntrack${libnetfilterconntrack_v}" \
      "java-${java_v}-openjdk-devel" \
      "OpenSpliceDDS${osplice_v}"
RUN  cd /usr/share/zoneinfo && \
      wget https://www.ietf.org/timezones/data/leap-seconds.list

# We try to avoid conda in the build, and we add things to both system and
#  stack pythons when possible
ARG asynccmd_v="0.2.4"
ARG asynctest_v="0.13.0"
ARG cmd2_v="0.9.19"
ARG confkaf_v="1.2.0"
ARG documenteer_v="0.5.8"
ARG ephem_v="3.7.7.0"
ARG kafkit_v="0.1.1"
ARG pycdst_v="2.5.0"
ARG sqlal_v="1.3.10"
ARG boto3_v="1.16.53"
ARG moto_v="1.3.16"
ARG black_v="19.10b0"
ARG ts_dds_v="6.9.190705.post8"

RUN  pip3 install --upgrade \
      "asynccmd==${asynccmd_v}" \
      "asynctest==${asynctest_v}" \
      "cmd2==${cmd2_v}" \
      "confluent_kafka==${confkaf_v}" \
      "documenteer[pipelines]==${documenteer_v}" \
      "ephem==${ephem_v}" \
      "kafkit[aiohttp]==${kafkit_v}" \
      "pycodestyle==${pycdst_v}" \
      "boto3==${boto3_v}" \
      "moto==${moto_v}" \
      "black==${black_v}"
# moto, boto3, and sqlalchemy are already in the stack env.
#  When rubinenv lands, documenteer will be too.
RUN source ${LOADSTACK} && \
     pip install --upgrade \
      "asynccmd==${asynccmd_v}" \
      "asynctest==${asynctest_v}" \
      "cmd2==${cmd2_v}" \
      "confluent_kafka==${confkaf_v}" \
      "documenteer[pipelines]==${documenteer_v}" \
      "ephem==${ephem_v}" \
      "kafkit[aiohttp]==${kafkit_v}" \
      "pycodestyle==${pycdst_v}" \
      "black==${black_v}" \
      "ts-dds==${ts_dds_v}"
ENV SRCDIR=/opt/lsst/src
RUN mkdir -p /opt/lsst/sal
ENV LSST_SDK_INSTALL=${SRCDIR}/ts_sal
ENV OSPL_HOME=/opt/OpenSpliceDDS/V6.9.0/HDE/x86_64.linux
ENV PYTHON_BUILD_LOCATION=/opt/lsst/software/stack/python/current
COPY salbldsteps.bash /opt/lsst/sal
ENV SALSTACK=/opt/lsst/sal/salbldsteps.bash
ENV LD_PRELOAD=""
ENV TZ="right/UTC"

#### Clear the astropy download cache
RUN source ${LOADSTACK} && \
    python3 -c 'from astropy.utils.data import clear_download_cache; \
                clear_download_cache()'

#### Now move on to SAL object builds
