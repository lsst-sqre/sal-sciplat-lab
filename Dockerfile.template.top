FROM {{BASE_IMAGE}}:{{VERSION}}
USER root
SHELL ["/bin/bash", "-lc"]
WORKDIR /tmp
# Start gluing in Tiago's SAL stuff.  We are leaving out the system stuff
#  that won't work in a container, and most of the X stuff, since there is no
#  X server available.

RUN  mkdir -p /opt/lsst/sal /opt/lsst/src
# We don't need a specific SAL user.
#     adduser -u 1004 -m -U -G lsst_lcl,jovyan -s /bin/bash \
#     -c "SAL user" -d /opt/lsst/sal/saluser saluser
COPY lsst-ts.repo /etc/yum.repos.d
RUN  yum repolist && \
      yum install -y https://repo.ius.io/ius-release-el7.rpm
ARG  d2u_v="-6.0.3-7.el7"
ARG  iproute_v="iproute-4.11.0-30.el7"
# These next four are iproute dependencies
ARG  iptables_v="-1.4.21-35.el7"
ARG  libmnl_v="-1.0.3-7.el7"
ARG  libnetfilter_conntrack_v="-1.0.6-1.el7_3"
ARG  libnfnetlink_v="-1.0.1-4.el7"
#ARG  java_v="-1:1.8.0.242.b08-0.el7_7.x86_64"
# This changes all the time.  Presumably for the better?  Old ones don't
#  stick around on the repo.
ARG  java_v="1.8.0"
# Use just the OpenSplice version (e.g. 6.9.0) so we capture the latest TSS rev
# Nope, pin.
ARG  osplice_v="6.9.0"
ARG  osplice_build="16"
ARG  osplice_el="el7"
ARG  osplice_py="py38"

RUN  yum install -y --enablerepo=extras \
      "dos2unix${d2u_v}" \
      "iproute${iproute_v}" \
      "iptables${iptables_v}" \
      "libmnl${libmnl_v}" \
      "libnfnetlink${libnfnetlink_v}" \
      "libnetfilter_conntrack${libnetfilterconntrack_v}" \
      "java-${java_v}-openjdk-devel" \
      "OpenSpliceDDS-${osplice_v}-${osplice_build}.${osplice_el}"
RUN  cd /usr/share/zoneinfo && \
      curl https://www.ietf.org/timezones/data/leap-seconds.list \
       -o leap-seconds.list

# We need librdkafka in the stack env to build confluent_kakfa
# Use mamba rather than conda for speed of solve
# Only pin black and ts-dds
ARG black_v=20.8b1
RUN source ${LOADSTACK} && \
     mamba install --no-banner -c conda-forge -y \
      librdkafka aiokafka astroquery asynctest \
      ephem kafkacat pre-commit pytest-asyncio pytest-tornasync \
      setuptools_scm pytest-black black=${black_v}
# Install ts-dds
RUN source ${LOADSTACK} && \
     mamba install --no-banner -c lsstts -y \
      ts-dds=${osplice_v}=${osplice_py}_${osplice_build}

ENV SRCDIR=/opt/lsst/src
RUN mkdir -p /opt/lsst/sal
ENV LSST_SDK_INSTALL=${SRCDIR}/ts_sal
ENV PYTHON_BUILD_LOCATION=/opt/lsst/software/stack/python/current
COPY salbldsteps.bash /opt/lsst/sal
ENV SALSTACK=/opt/lsst/sal/salbldsteps.bash
ENV LD_PRELOAD=""
ENV OSPL_HOME=/opt/OpenSpliceDDS/V6.9.0/HDE/x86_64.linux
ENV TZ="UTC"

#### Clear the astropy download cache
RUN source ${LOADSTACK} && \
    python3 -c 'from astropy.utils.data import clear_download_cache; \
                clear_download_cache()'

#### Now move on to SAL object builds
