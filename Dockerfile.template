FROM {{BASE_IMAGE}}:{{VERSION}}
USER root
SHELL ["/bin/bash", "-lc"]
WORKDIR /tmp
# Start gluing in Tiago's SAL stuff.  We are leaving out the system stuff
#  that won't work in a container, and most of the X stuff, since there is no
#  X server available.

RUN  mkdir -p /opt/lsst/sal /opt/lsst/src
# We don't need a specific SAL user.
#     adduser -u 1004 -m -U -G lsst_lcl,jovyan -s /bin/bash \
#     -c "SAL user" -d /opt/lsst/sal/saluser saluser
COPY lsst-ts.repo /etc/yum.repos.d
RUN  yum repolist && \
      yum install -y https://centos7.iuscommunity.org/ius-release.rpm
ARG  d2u_v="-6.0.3-7.el7"
ARG  iproute_v="-4.11.0-25.el7"
ARG  java_v="-1:1.8.0.242.b08-0.el7_7.x86_64"
ARG  osplice_v="-6.9.0-5"
RUN  yum install -y --enablerepo=extras \
      "dos2unix${d2u_v}" \
      "iproute${iproute_v}" \
      "java-1.8.0-openjdk-devel${java_v}" \
      "OpenSpliceDDS${osplice_v}"
RUN  cd /usr/share/zoneinfo && \
      wget https://www.ietf.org/timezones/data/leap-seconds.list

# We try to avoid conda in the build, and we add things to both system and
#  stack pythons when possible

ARG asynccmd_v="0.2.4"
ARG asynctest_v="0.13.0"
ARG cmd2_v="0.9.19"
ARG confkaf_v="1.2.0"
ARG documenteer_v="0.4.2"
ARG ephem_v="3.7.7.0"
ARG gitpy_v="3.0.3"
ARG jinja2_v="2.10.3"
ARG kafkit_v="0.1.1"
ARG pycdst_v="2.5.0"
ARG sqlal_v="1.3.10"
ARG boto3_v="1.11.2"
ARG moto_v="1.3.14"

RUN  pip3 install --upgrade \
      "asynccmd==${asynccmd_v}" \
      "asynctest==${asynctest_v}" \
      "cmd2==${cmd2_v}" \
      "confluent_kafka==${confkaf_v}" \
      "documenteer[pipelines]==${documenteer_v}" \
      "ephem==${ephem_v}" \
      "gitpython==${gitpy_v}" \
      "jinja2==${jinja2_v}" \
      "kafkit[aiohttp]==${kafkit_v}" \
      "pycodestyle==${pycdst_v}" \
      "sqlalchemy==${sqlal_v}" \
      "boto3==${boto3_v}" \
      "moto==${moto_v}"
RUN source ${LOADSTACK} && \
     pip install --upgrade \
      "asynccmd==${asynccmd_v}" \
      "asynctest==${asynctest_v}" \
      "cmd2==${cmd2_v}" \
      "confluent_kafka==${confkaf_v}" \
      "documenteer[pipelines]==${documenteer_v}" \
      "ephem==${ephem_v}" \
      "gitpython==${gitpy_v}" \
      "jinja2==${jinja2_v}" \
      "kafkit[aiohttp]==${kafkit_v}" \
      "pycodestyle==${pycdst_v}" \
      "sqlalchemy==${sqlal_v}" \
      "boto3==${boto3_v}" \
      "moto==${moto_v}"
ENV SRCDIR=/opt/lsst/src
RUN mkdir -p /opt/lsst/sal
ENV LSST_SDK_INSTALL=${SRCDIR}/ts_sal
ENV OSPL_HOME=/opt/OpenSpliceDDS/V6.9.0/HDE/x86_64.linux
ENV PYTHON_BUILD_LOCATION=/opt/lsst/software/stack/python/current
COPY salbldsteps.bash /opt/lsst/sal
ENV SALSTACK=/opt/lsst/sal/salbldsteps.bash
ENV LD_PRELOAD=""

#### Now move on to SAL object builds
ARG config_ocs_v="v0.4.0"
ARG sal_v="v4.0.0"
ARG salobj_v="v5.4.0"
ARG xml_v="v4.7.0"
ARG idl_v="v1.1.0"
ARG config_attcs_v="v0.2.0"
ARG scriptqueue_v="v2.5.0"
ARG externalscripts_v="v0.2.1"
ARG standardscripts_v="v0.10.0"
ARG ATDome_v="v1.1.0"
ARG ATDomeTrajectory_v="v1.2.0"
ARG ts_simactuators_v="v0.2.0"
ARG ATMCSSimulator_v="v0.10.1"

RUN cd ${SRCDIR} && \
    gitsrc="ts_config_ocs:${config_ocs_v} \
            ts_sal:${sal_v} \
            ts_salobj:${salobj_v} \
            ts_xml:${xml_v} \
            ts_idl:${idl_v} \
            ts_config_attcs:${config_attcs_v} \
            ts_scriptqueue:${scriptqueue_v} \
            ts_externalscripts:${externalscripts_v} \
            ts_standardscripts:${standardscripts_v} \
            ts_ATDome:${ATDome_v} \
            ts_ATDomeTrajectory:${ATDomeTrajectory_v} \
            ts_ATMCSSimulator:${ATMCSSimulator_v} \
            ts_simactuators:${ts_simactuators_v}" && \
    rb="https://github.com/lsst-ts" && \
    for g in $gitsrc ; do \
        r=$(echo ${g} | cut -d ':' -f 1) \
        t=$(echo ${g} | cut -d ':' -f 2) ;\
        git clone --branch ${t} --single-branch ${rb}/${r}.git ; \
        cd ${r} ; \
        git checkout -b ${t} ; \
        cd .. ; \
    done
RUN  cd ${SRCDIR}/ts_config_ocs && \
      source ${SALSTACK} && \
      eups declare -r . ts_config_ocs -t current && \
      setup ts_config_ocs -t current
RUN  cd ${SRCDIR}/ts_xml && \
      source ${SALSTACK} && \
      eups declare -r . ts_xml -t current
# FIXME remove the test-ignore once 4.0.1 or 4.1 is released
RUN  cd ${LSST_SDK_INSTALL} && \
      source ${SALSTACK} && \
      mkdir -p ${SAL_WORK_DIR} && \
      mkdir -p ${TS_SAL_DIR}/lib && \
      eups declare -r . ts_sal -t current && \
      setup ts_sal -t current && \
      scons || (echo 'SCONS FAILED: running py.test' && py.test) || \
       echo 'py.test failed, but ignoring pending merge of curr_tai() fix'
RUN  cd ${SRCDIR}/ts_idl && \
      source ${SALSTACK} && \
      eups declare -r . ts_idl -t current && \
      setup ts_idl -t current && \
      scons || (echo 'SCONS FAILED: running py.test' && py.test)
# Create all the IDL
RUN  cd ${LSST_SDK_INSTALL} && \
      source ${SALSTACK} && \
      setup ts_sal -t current && \
      setup ts_idl -t current && \
      unset LD_PRELOAD && \
      make_idl_files.py $(ls ${TS_XML_DIR}/sal_interfaces | \
        grep -v xml | grep -v MTM1M3 | grep -v HVAC | tr '\n' ' ')
RUN  cd ${SRCDIR} && \
      mkdir dds && \
      cd dds && \
      os="/opt/OpenSpliceDDS/V6.9.0/HDE/x86_64.linux" && \
      tar xvfz ${os}/tools/python-support.tgz && \
      dds_v="v6.9.0" && \
      git config --global user.email "saluser@lsst.org" && \
      git config --global user.name "SAL User" && \
      git init && \
      git add . && \
      git checkout -b ${dds_v} && \
      git commit -a -m ${dds_v} && \
      git tag -a ${dds_v} -m ${dds_v} && \
      cd python/src && \
      source ${SALSTACK} && \
      setup ts_idl -t current && \
      python setup.py install && \
      echo "/opt/OpenSpliceDDS/V6.9.0/HDE/x86_64.linux/lib" \
       >> /etc/ld.so.conf.d/opensplice-x86_64.conf && \
      ldconfig -v
RUN  cd ${SRCDIR}/ts_salobj && \
      source ${SALSTACK} && \
      eups declare -r . ts_salobj -t current && \
      setup ts_salobj -t current && \
      scons || (echo 'SCONS FAILED: running py.test' && py.test)
RUN  cd ${SRCDIR}/ts_config_attcs && \
      source ${SALSTACK} && \
      eups declare -r . ts_config_attcs -t current && \
      setup ts_config_attcs -t current
RUN  cd ${SRCDIR}/ts_simactuators && \
      source ${SALSTACK} && \
      eups declare -r . ts_simactuators -t current && \
      setup ts_simactuators -t current && \
      scons || (echo 'SCONS FAILED: running py.test' && py.test)
RUN  cd ${SRCDIR}/ts_ATMCSSimulator && \
      source ${SALSTACK} && \
      eups declare -r . ts_ATMCSSimulator -t current && \
      setup ts_ATMCSSimulator -t current && \
      scons || (echo 'SCONS FAILED: running py.test' && py.test)
ENV  LSST_DDS_DOMAIN=citest
RUN  cd ${SRCDIR}/ts_ATDome && \
      source ${SALSTACK} && \
      eups declare -r . ts_ATDome -t current && \
      setup ts_ATDome -t current && \
      scons || (echo 'SCONS FAILED: running py.test' && py.test)
RUN  cd ${SRCDIR}/ts_ATDomeTrajectory && \
      source ${SALSTACK} && \
      eups declare -r . ts_ATDomeTrajectory -t current && \
      setup ts_ATDomeTrajectory -t current && \
      scons || (echo 'SCONS FAILED: running py.test' && py.test)
RUN  cd ${SRCDIR}/ts_standardscripts && \
      source ${SALSTACK} && \
      eups declare -r . ts_standardscripts -t current && \
      setup ts_standardscripts -t current && \
      scons || (echo 'SCONS FAILED: running py.test' && py.test)
RUN  cd ${SRCDIR}/ts_externalscripts && \
      source ${SALSTACK} && \
      eups declare -r . ts_externalscripts -t current && \
      setup ts_externalscripts -t current && \
      scons || (echo 'SCONS FAILED: running py.test' && py.test)
RUN  cd ${SRCDIR}/ts_scriptqueue && \
      source ${SALSTACK} && \
      eups declare -r . ts_scriptqueue -t current && \
      setup ts_scriptqueue -t current && \
      scons || (echo 'SCONS FAILED: running py.test' && py.test)

# Back to the Lab environment

ENV  jl=/opt/lsst/software/jupyterlab
ENV  verdir="${jl}/versions.installed"

# Make the "LSST" kernel set up ts_sal objects too
COPY sal_lsstlaunch.bash ${jl}/lsstlaunch.bash

# Regenerate installed software list
RUN  pip3 freeze > ${verdir}/requirements-system.txt && \
      source ${LOADSTACK} && \
      pip3 freeze > ${verdir}/requirements-stack.txt && \
      rpm -qa | sort > ${verdir}/rpmlist.txt

# Clean up /tmp
RUN rm -rf /tmp/*

WORKDIR /tmp
# This needs to be numeric for k8s non-root contexts
USER 769:769
CMD [ "/opt/lsst/software/jupyterlab/provisionator.bash" ]

LABEL description="SAL version of sciplat-lab: {{IMAGE_NAME}}" \
       name="{{IMAGE_NAME}}" \
       version="{{VERSION}}"
