FROM {{BASE_IMAGE}}:{{VERSION}}
USER root
SHELL ["/bin/bash", "-lc"]
WORKDIR /tmp
# Start gluing in Tiago's SAL stuff.  We are leaving out the system stuff
#  that won't work in a container, and most of the X stuff, since there is no
#  X server available.

RUN  mkdir -p /opt/lsst/sal /opt/lsst/src
# We don't need a specific SAL user.
#     adduser -u 1004 -m -U -G lsst_lcl,jovyan -s /bin/bash \
#     -c "SAL user" -d /opt/lsst/sal/saluser saluser
COPY lsst-ts.repo /etc/yum.repos.d
RUN  yum repolist && \
      yum install -y https://centos7.iuscommunity.org/ius-release.rpm
ARG  d2u_v="-6.0.3-7.el7"
ARG  iproute_v="-4.11.0-25.el7_7.2"
#ARG  java_v="-1:1.8.0.242.b08-0.el7_7.x86_64"
# This changes all the time.  Presumably for the better?  Old ones don't
#  stick around on the repo.
ARG  java_v="-1:1.8.0"
# Use just the OpenSplice version (e.g. 6.9.0) so we capture the latest TSS rev
ARG  osplice_v="-6.9.0"
RUN  yum install -y --enablerepo=extras \
      "dos2unix${d2u_v}" \
      "iproute${iproute_v}" \
      "java-1.8.0-openjdk-devel${java_v}" \
      "OpenSpliceDDS${osplice_v}"
RUN  cd /usr/share/zoneinfo && \
      wget https://www.ietf.org/timezones/data/leap-seconds.list

# We try to avoid conda in the build, and we add things to both system and
#  stack pythons when possible

ARG asynccmd_v="0.2.4"
ARG asynctest_v="0.13.0"
ARG cmd2_v="0.9.19"
ARG confkaf_v="1.2.0"
ARG documenteer_v="0.4.2"
ARG ephem_v="3.7.7.0"
ARG gitpy_v="3.0.3"
ARG jinja2_v="2.10.3"
ARG kafkit_v="0.1.1"
ARG pycdst_v="2.5.0"
ARG sqlal_v="1.3.10"
ARG boto3_v="1.11.2"
ARG moto_v="1.3.14"

RUN  pip3 install --upgrade \
      "asynccmd==${asynccmd_v}" \
      "asynctest==${asynctest_v}" \
      "cmd2==${cmd2_v}" \
      "confluent_kafka==${confkaf_v}" \
      "documenteer[pipelines]==${documenteer_v}" \
      "ephem==${ephem_v}" \
      "gitpython==${gitpy_v}" \
      "jinja2==${jinja2_v}" \
      "kafkit[aiohttp]==${kafkit_v}" \
      "pycodestyle==${pycdst_v}" \
      "sqlalchemy==${sqlal_v}" \
      "boto3==${boto3_v}" \
      "moto==${moto_v}"
RUN source ${LOADSTACK} && \
     pip install --upgrade \
      "asynccmd==${asynccmd_v}" \
      "asynctest==${asynctest_v}" \
      "cmd2==${cmd2_v}" \
      "confluent_kafka==${confkaf_v}" \
      "documenteer[pipelines]==${documenteer_v}" \
      "ephem==${ephem_v}" \
      "gitpython==${gitpy_v}" \
      "jinja2==${jinja2_v}" \
      "kafkit[aiohttp]==${kafkit_v}" \
      "pycodestyle==${pycdst_v}" \
      "sqlalchemy==${sqlal_v}" \
      "boto3==${boto3_v}" \
      "moto==${moto_v}"
ENV SRCDIR=/opt/lsst/src
RUN mkdir -p /opt/lsst/sal
ENV LSST_SDK_INSTALL=${SRCDIR}/ts_sal
ENV OSPL_HOME=/opt/OpenSpliceDDS/V6.9.0/HDE/x86_64.linux
ENV PYTHON_BUILD_LOCATION=/opt/lsst/software/stack/python/current
COPY salbldsteps.bash /opt/lsst/sal
ENV SALSTACK=/opt/lsst/sal/salbldsteps.bash
ENV LD_PRELOAD=""

#### Now move on to SAL object builds
ARG ts_config_ocs="v0.4.0"
ARG ts_config_attcs="v0.5.0"
ARG ts_config_mtcalsys="v0.1.0"
ARG ts_config_eas="v0.1.0"
ARG ts_config_latiss="v0.3.0"
ARG ts_config_mttcs="v0.2.0"
ARG ts_config_atcalsys="v0.1.0"
ARG ts_sal="v4.1.0"
ARG ts_salobj="v5.10.0"
ARG ts_xml="v5.0.0"
ARG ts_idl="v1.2.0"
ARG ts_scriptqueue="v2.5.1"
ARG ts_observatory_control="v0.1.0"
ARG ts_standardscripts="v1.0.0"
ARG ts_externalscripts="v0.3.0"
ARG ts_ATMCSSimulator="v1.0.0"
ARG ts_ATDome="v1.1.1"
ARG ts_ATDomeTrajectory="v1.3.1"
ARG ts_simactuators="v1.0.0"
ARG ts_hexrotcomm="v0.5.0"

RUN source ${LOADSTACK} && \
    cd ${SRCDIR} && \
    gitsrc="ts_config_ocs:${ts_config_ocs} \
            ts_config_attcs:${ts_config_attcs} \
            ts_config_mtcalsys:${ts_config_mtcalsys} \
            ts_config_eas:${ts_config_eas} \
            ts_config_latiss:${ts_config_latiss} \
            ts_config_mttcs:${ts_config_mttcs} \
            ts_config_atcalsys:${ts_config_atcalsys} \
            ts_sal:${ts_sal} \
            ts_salobj:${ts_salobj} \
            ts_xml:${ts_xml} \
            ts_idl:${ts_idl} \
            ts_simactuators:${ts_simactuators} \
            ts_hexrotcomm:${ts_hexrotcomm} \
            ts_ATMCSSimulator:${ts_ATMCSSimulator} \
            ts_ATDomeTrajectory:${ts_ATDomeTrajectory} \
            ts_ATDome:${ts_ATDome} \
            ts_observatory_control:${ts_observatory_control} \
            ts_standardscripts:${ts_standardscripts} \
            ts_externalscripts:${ts_externalscripts} \
            ts_scriptqueue:${ts_scriptqueue}" && \
    rb="https://github.com/lsst-ts" && \
    for g in $gitsrc ; do \
        r=$(echo ${g} | cut -d ':' -f 1) \
        t=$(echo ${g} | cut -d ':' -f 2) ;\
        git clone --branch ${t} --depth 1 --single-branch ${rb}/${r}.git ; \
        cd ${r} ; \
        git checkout -b ${t} ; \
        eups declare -r . -t current ; \
        cd .. ; \
    done

ENV LSST_DDS_DOMAIN=citest

# Build SAL. Test us unstable with scons. Rerun with pytest if it fails
RUN  cd ${LSST_SDK_INSTALL} && \
      source ${SALSTACK} && \
      unset LD_PRELOAD && \
      mkdir -p ${SAL_WORK_DIR} && \
      mkdir -p ${TS_SAL_DIR}/lib && \
      setup ts_sal -t current && \
      scons || (echo 'SCONS FAILED: running pytest' && pytest --lf)

# Install pydds libraries
RUN  cd ${SRCDIR} && \
      mkdir dds && \
      cd dds && \
      os="/opt/OpenSpliceDDS/V6.9.0/HDE/x86_64.linux" && \
      tar xvfz ${os}/tools/python-support.tgz && \
      dds_v="v6.9.0" && \
      git config --global user.email "saluser@lsst.org" && \
      git config --global user.name "SAL User" && \
      git init && \
      git add . && \
      git checkout -b ${dds_v} && \
      git commit -a -m ${dds_v} && \
      git tag -a ${dds_v} -m ${dds_v} && \
      cd python/src && \
      source ${SALSTACK} && \
      python setup.py install && \
      echo "/opt/OpenSpliceDDS/V6.9.0/HDE/x86_64.linux/lib" \
       >> /etc/ld.so.conf.d/opensplice-x86_64.conf && \
      ldconfig -v

# Create IDL files and SALPY libraries for salobj unit tests.
RUN  cd ${LSST_SDK_INSTALL} && \
      source ${SALSTACK} && \
      unset LD_PRELOAD && \
      setup ts_sal -t current && \
      setup ts_idl -t current && \
      make_idl_files.py Test Script LOVE && \
      make_salpy_libs.py Test

# Run salobj unit tests. Test is unstable with scons.
# Rerun with pytest --lf if it fails.

RUN  cd ${SRCDIR}/ts_salobj && \
      source ${SALSTACK} && \
      unset LD_PRELOAD && \
      setup ts_salobj -t current && \
      scons || (echo 'SCONS FAILED: running pytest' && pytest --lf)

# Make all idl files
RUN  cd ${LSST_SDK_INSTALL} && \
      source ${SALSTACK} && \
      setup ts_sal -t current && \
      setup ts_idl -t current && \
      unset LD_PRELOAD && \
      make_idl_files.py --all

# It's tempting to do this in a loop, but if you do, you lose all incremental
#  progress if you're fixing tests while building.

# Also, ts_hexrotcomm needs ts_salobj set up explicitly.
RUN  cd ${SRCDIR}/ts_simactuators && \
      source ${SALSTACK} && \
      setup ts_simactuators -t current && \
      scons || (echo 'SCONS FAILED: running pytest' && pytest --lf)
RUN  cd ${SRCDIR}/ts_hexrotcomm && \
      source ${SALSTACK} && \
      setup ts_salobj -t current && \
      setup ts_hexrotcomm -t current && \
      scons || (echo 'SCONS FAILED: running pytest' && pytest --lf)
RUN  cd ${SRCDIR}/ts_ATMCSSimulator && \
      source ${SALSTACK} && \
      setup ts_ATMCSSimulator -t current && \
      scons || (echo 'SCONS FAILED: running pytest' && pytest --lf)
RUN  cd ${SRCDIR}/ts_ATDome && \
      source ${SALSTACK} && \
      setup ts_ATDome -t current && \
      scons || (echo 'SCONS FAILED: running pytest' && pytest --lf)
RUN  cd ${SRCDIR}/ts_ATDomeTrajectory && \
      source ${SALSTACK} && \
      setup ts_ATDomeTrajectory -t current && \
      scons || (echo 'SCONS FAILED: running pytest' && pytest --lf)
RUN  cd ${SRCDIR}/ts_observatory_control && \
      source ${SALSTACK} && \
      setup ts_observatory_control -t current && \
      scons || (echo 'SCONS FAILED: running pytest' && pytest --lf)
RUN  cd ${SRCDIR}/ts_standardscripts && \
      source ${SALSTACK} && \
      setup ts_standardscripts -t current && \
      scons || (echo 'SCONS FAILED: running pytest' && pytest --lf)
RUN  cd ${SRCDIR}/ts_externalscripts && \
      source ${SALSTACK} && \
      setup ts_externalscripts -t current && \
      scons || (echo 'SCONS FAILED: running pytest' && pytest --lf) || \
        echo "Expected failure; continuing."
RUN  cd ${SRCDIR}/ts_scriptqueue && \
      source ${SALSTACK} && \
      setup ts_scriptqueue -t current && \
      scons || (echo 'SCONS FAILED: running pytest' && pytest --lf)

# Back to the Lab environment

ARG  jl=/opt/lsst/software/jupyterlab
ARG  verdir="${jl}/versions.installed"

# Make the "LSST" kernel set up ts_sal objects too
COPY sal_lsstlaunch.bash ${jl}/lsstlaunch.bash

# Regenerate installed software list
RUN  pip3 freeze > ${verdir}/requirements-system.txt && \
      source ${LOADSTACK} && \
      pip3 freeze > ${verdir}/requirements-stack.txt && \
      rpm -qa | sort > ${verdir}/rpmlist.txt

# Clean up /tmp
RUN rm -rf /tmp/*

WORKDIR /tmp

# This needs to be numeric for k8s non-root contexts
USER 769:769
CMD [ "/opt/lsst/software/jupyterlab/provisionator.bash" ]

LABEL description="SAL version of sciplat-lab: {{IMAGE_NAME}}" \
       name="{{IMAGE_NAME}}" \
       version="{{VERSION}}"
