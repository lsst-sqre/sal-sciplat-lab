#!/bin/bash
set -e

function usage() {
    echo 1>&2 "Usage: $0 [-e ENVIRONMENT ] TAG"
    echo 1>&2 "  -d enables dry run (no Docker build or push)"
    echo 1>&2 "  -x is 'do not push' (but does build)."
    echo 1>&2 "  -j adds 'exp_' to front and '_jlbleed' to end of tag."
    echo 1>&2 "  default ENVIRONMENT=''; can be branch name (e.g. 'summit')"
    echo 1>&2 "  typical TAG='w_2020_25'"
    exit 2
}

giturl="https://github.com/lsst-sqre/sal-sciplat-lab"
owner="lsstsqre"
basename="sciplat-lab"
imagename="sal-sciplat-lab"
sal_env="master"
BASE_IMAGE="${owner}/${basename}"
IMAGE_NAME="${owner}/${imagename}"
OPTIND=1
DRY_RUN=0
NOPUSH=0
JLBLEED=0
ENVIRONMENT=""
TAG_PREFIX=""
while getopts ':hdxje:' opt; do
    case $opt in
    h)
        usage
        ;;
    d)
        DRY_RUN=1
        ;;
    x)
        NOPUSH=1
        ;;
    j)
	JLBLEED=1
	;;
    e)
        ENVIRONMENT=${OPTARG}
        ;;
    \?)
        usage
        ;;
    esac
done
shift $((OPTIND - 1))
TAG=${1}
if [ -z "${TAG}" ] || [ $# -gt 1 ]; then
    usage
fi
if [ -n "${ENVIRONMENT}" ]; then
    imagename="${ENVIRONMENT}-${imagename}"
    IMAGE_NAME="${owner}/${imagename}"
    sal_env=${ENVIRONMENT}
fi
salfile="SAL_versions.${sal_env}"
sal_link=$(readlink ${salfile} || /bin/true)
if [ -n "${sal_link}" ]; then
   # This sal file is a symlink, so we will build the real version
   #  and then just create tags pointing to it.
    tgt=$(echo ${sal_link} | cut -d '.' -f 2)
    if [ ${tgt} == "master" ]; then
	# Build real version with no environment tag
	$0 ${TAG}
	srcimg="${owner}/sal-sciplat-lab"
    else
	# Build real version with environment tag referencing target file.
	$0 -e ${tgt} ${TAG}
	srcimg="${owner}/${tgt}-sal-sciplat-lab"
    fi
    # Fix release tags
    VERSION=${TAG/#v/r}
    TAG="${VERSION}"
    if [ "${TAG:0:1}" == "v" ]; then
	TAG="r${TAG:1}"
    fi
    docker tag ${srcimg}:${TAG} ${IMAGE_NAME}:${TAG}
    docker push ${IMAGE_NAME}:${TAG}
    EXPERIMENTAL=0
    etag=$(echo "${VERSION}" | cut -d '_' -f 1)
    if [ "${etag}" = "exp" ]; then
	EXPERIMENTAL=1
    fi
    if [ "${EXPERIMENTAL}" -ne 1 ]; then
	ichar=$(echo "${VERSION}" | cut -c 1)
	itype=""
	case $ichar in
	    "r")
		itype="release"
		;;
	    "w")
		itype="weekly"
		;;
	    "d")
		itype="daily"
		;;
	    *)
		;;
	esac
	if [ -n "$itype" ]; then
            docker tag ${IMAGE_NAME}:${TAG} ${IMAGE_NAME}:latest_${itype}
            docker push ${IMAGE_NAME}:latest_${itype}
	fi
	docker tag ${IMAGE_NAME}:${TAG} ${IMAGE_NAME}:latest
	docker push ${IMAGE_NAME}:latest
    fi
    exit 0 # We're done: no build, just tag-and-push
fi
# But if we got here, we need to actually do the build.
cat Dockerfile.template.top \
    SAL_versions.${sal_env} \
    Dockerfile.template.bottom \
    > Dockerfile.template
VERSION=${TAG/#v/r}
if [ "${JLBLEED}" -eq 1 ] ; then
    VERSION="exp_${VERSION}_jlbleed"
fi
sed -e "s|{{BASE_IMAGE}}|${BASE_IMAGE}|g" \
    -e "s|{{IMAGE_NAME}}|${IMAGE_NAME}|g" \
    -e "s|{{ENV}}|${sal_env}|g" \
    -e "s|{{VERSION}}|${VERSION}|g" \
    -e "s|{{TAG}}|${TAG}|g" \
    < Dockerfile.template > Dockerfile
if [ "${NOPUSH}" -eq 1 ]; then
    VERSION="nopush_${VERSION}"
fi
if [ "${DRY_RUN}" -ne 0 ]; then
    echo 1>&2 "Dry run: Dockerfile written, stopping before build/push."
    exit 0
fi
./bld_1
